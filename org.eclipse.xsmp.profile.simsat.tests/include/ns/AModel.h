// -----------------------------------------------------------------------------
// File Name      : AModel.h
// Generated by : SimSatGenerator-1.1.0.202305111213
// -----------------------------------------------------------------------------
/// @file ns/AModel.h

#ifndef NS_AMODEL_H_
#define NS_AMODEL_H_

// Include the generated header file
#include "ns/AModelGen.h"

// ----------------------------------------------------------------------------
// ------------------------ Types and Interfaces ------------------------
// ----------------------------------------------------------------------------

namespace ns {
class AModel: public AModelGen {
public:
    // ------------------------------------------------------------------------------------
    // -------------------------- Constructors/Destructor --------------------------
    // ------------------------------------------------------------------------------------

    /// Constructor setting name, description and parent.
    /// @param name Name of new model instance.
    /// @param description Description of new model instance.
    /// @param parent Parent of new model instance.
    /// @param simulator The simulator.
    AModel(::Smp::String8 name, ::Smp::String8 description,
            ::Smp::IComposite *parent, ::Smp::ISimulator *simulator);

    /// Virtual destructor to release memory.
    ~AModel() override;

private:
    // AModelGen call DoPublish/DoConfigure/DoConnect/DoDisconnect
    friend class ::ns::AModelGen;

    /// Publish fields, operations and properties of the model.
    /// @param receiver Publication receiver.
    void DoPublish(::Smp::IPublication *receiver);

    /// Request for configuration.
    /// @param logger Logger to use for log messages during Configure().
    /// @param linkRegistry Link Registry to use for registration of
    ///         links created during Configure() or later.
    void DoConfigure(::Smp::Services::ILogger *logger,
            ::Smp::Services::ILinkRegistry *linkRegistry);

    /// Connect model to simulator.
    /// @param simulator Simulation Environment that hosts the model.
    ///
    void DoConnect(::Smp::ISimulator *simulator);

    /// Disconnect model to simulator.
    /// @throws Smp::InvalidComponentState
    void DoDisconnect();

public:
    virtual void _ep() override;
    virtual void _voidEventSink(::Smp::IObject *sender) override;
    virtual void _int32EventSink(::Smp::IObject *sender, ::Smp::Int32 value)
            override;
};
} // namespace ns

#endif // NS_AMODEL_H_
