// -----------------------------------------------------------------------------
// File Name      : TestModel.h
// Generated by : XsmpGenerator-1.1.0.202305171205
// -----------------------------------------------------------------------------
/// @file Test/TestModel.h

#ifndef TEST_TESTMODEL_H_
#define TEST_TESTMODEL_H_

// Include the generated header file
#include "Test/TestModelGen.h"

// ----------------------------------------------------------------------------
// ------------------------ Types and Interfaces ------------------------
// ----------------------------------------------------------------------------

namespace Test {
class TestModel: public TestModelGen {
public:
    // ------------------------------------------------------------------------------------
    // -------------------------- Constructors/Destructor --------------------------
    // ------------------------------------------------------------------------------------

    /// Constructor setting name, description and parent.
    /// @param name Name of new model instance.
    /// @param description Description of new model instance.
    /// @param parent Parent of new model instance.
    TestModel(::Smp::String8 name, ::Smp::String8 description,
            ::Smp::IObject *parent);
    /// deleted copy constructor
    TestModel(const TestModel&) = delete;
    /// deleted move constructor
    TestModel(TestModel&&) = delete;
    /// deleted copy assignment
    TestModel& operator=(const TestModel&) = delete;
    /// deleted move assignment
    TestModel& operator=(TestModel&&) = delete;

    /// Virtual destructor to release memory.
    ~TestModel() override; 

    ::Smp::Int32 addition(::Smp::Int32 a, ::Smp::Int32 b) override;

private:
    // TestModelGen call DoPublish/DoConfigure/DoConnect/DoDisconnect
    friend class ::Test::TestModelGen;

    /// Publish fields, operations and properties of the model.
    /// @param receiver Publication receiver.
    void DoPublish(::Smp::IPublication *receiver);

    /// Request for configuration.
    /// @param logger Logger to use for log messages during Configure().
    /// @param linkRegistry Link Registry to use for registration of
    ///         links created during Configure() or later.
    void DoConfigure(::Smp::Services::ILogger *logger,
            ::Smp::Services::ILinkRegistry *linkRegistry);

    /// Connect model to simulator.
    /// @param simulator Simulation Environment that hosts the model.
    ///
    void DoConnect(::Smp::ISimulator *simulator);

    /// Disconnect model to simulator.
    /// @throws Smp::InvalidComponentState
    void DoDisconnect();
};
} // namespace Test

#endif // TEST_TESTMODEL_H_
